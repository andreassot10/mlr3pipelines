% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpPredictionUnion.R
\name{mlr_pipeops_predictionunion}
\alias{mlr_pipeops_predictionunion}
\alias{PipeOpPredictionUnion}
\title{PipeOpPredictionUnion}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.
}
\description{
Unite predictions from all input predictions into a single
\code{\link[mlr3:Prediction]{Prediction}}.

\code{task_type}s and \code{predict_types} must be equal across all input predictions.

Note that predictions are combined as is, i.e., no checks for duplicated row
identifiers etc. are performed.

Currently only supports task types \code{classif} and \code{regr} by constructing a new
\code{\link[mlr3:PredictionClassif]{PredictionClassif}} and respectively
\code{\link[mlr3:PredictionRegr]{PredictionRegr}}.
}
\section{Construction}{
\preformatted{PipeOpPredictionUnion$new(innum = 0, id = "predictionunion", param_vals = list())
}
\itemize{
\item \code{innum} :: \code{numeric(1)} | \code{character}\cr
Determines the number of input channels. If \code{innum} is 0 (default), a vararg input channel is
created that can take an arbitrary number of inputs. If \code{innum} is a \code{character} vector, the
number of input channels is the length of \code{innum}.
\item \code{id} :: \code{character(1)}\cr
Identifier of the resulting object, default \code{"predictionunion"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpPredictionUnion}} has multiple input channels depending on the \code{innum} construction
argument, named \code{"input1"}, \code{"input2"}, ... if \code{innum} is nonzero; if \code{innum} is 0, there is only
one \emph{vararg} input channel named \code{"..."}. All input channels take \code{NULL} during training and a
\code{\link[mlr3:Prediction]{Prediction}} during prediction.

\code{\link{PipeOpPredictionUnion}} has one output channel named \code{"output"}, producing \code{NULL} during
training and a \code{\link[mlr3:Prediction]{Prediction}} during prediction.

The output during prediction is a \code{\link[mlr3:Prediction]{Prediction}} constructed by combining all
input \code{\link[mlr3:Prediction]{Prediction}}s.
}

\section{State}{

The \verb{$state} is left empty (\code{list()}).
}

\section{Parameters}{

\code{\link{PipeOpPredictionUnion}} has no Parameters.
}

\section{Internals}{

Only sets the fields \code{row_ids}, \code{truth}, \code{response} and if applicable \code{prob} and \code{se} during
construction of the output \code{\link[mlr3:Prediction]{Prediction}}.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\examples{
library("mlr3")

task = tsk("iris")
filter = expression(Sepal.Length < median(Sepal.Length))
gr = po("copy", outnum = 2) \%>>\% gunion(list(
  po("filterrows", id = "filter1",
    param_vals = list(filter = filter)) \%>>\%
  lrn("classif.rpart", id = "learner1"),
  po("filterrows", id = "filter2",
     param_vals = list(filter = filter, invert = TRUE)) \%>>\%
  lrn("classif.rpart", id = "learner2")
)) \%>>\% po("predictionunion")

gr$train(task)
gr$predict(task)
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpProxy}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filterrows}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinverter}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_targettrafosimple}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
